= Работа с файлами. Програмирование на высоком, среднем и низком уровне. Дескриптор файла. Создать файл, открыть, закрыть, удалить, пример.

== Уровни программирования:
- Низкий уровень --- сам реализуешь прямое обращение к портам ввода/вывода, доступ к памяти. Такой уровень используется при очень высокой требовательности к быстродействию программ и при работе с нестандартными устройствами ввода/вывода.
- Средний уровень --- это прямое обращение к функциям BIOS, которое повышает скорость выполнения операций ввода/вывода по сравнению с высоким уровнем.
- Высокий уровень --- это использование системных функций ОС: подготовка необходимых данных для работы системных функций ОС и обращение к ним.

Файл на диске --- последовательность байтов, пронумерованных с нуля, текущий байт определеяется указателем.

Возможен как прямой, так и последовательный доступ к байтам.

*Спецификация файла* --- это строка символов, содержащая буквау диска, путь к файлу, имя файла и заканчивающаяся нулем, т.е. ноль признак конца строки (здесь).

Открывая файл, ОС создает уникальное 16-разрядное число, называемое номером, идентификатором или *дескриптором файла*, он используется описания файла и обращения к нему. Первые идентификаторы зарезервированы:

- 0 --- STDIN (обычно клавиатура);
- 1 --- STDOUT (обычно экран);
- 2 --- STDERR (всегда экран);
- 3 --- AUX --- последовательный порт (обычно COM1);
- 4 --- PRN --- параллельный порт (обычно LPT1 --- принтер);

Стандартный ввод/вывод можно перенаправить на любое устройство или в файл. Основные *функции* для создания, открытия, закрытия и удаления:

(Все функции работы с файлами вызываются int 21h.)

+ *Создать файл --- 3Ch.*
  
  *При вызове* этой функции нужно определить следующие регистры:

  $A H arrow.l.double 3 C h$,
  
  DS:DX --- адрес ASCIIZ --- строка, содержащей спецификацию файла (ASCIIZ --- это ASCII строка заканчивающаяся 0)
  
  CX $arrow.l.double$ атрибуты файла (можно комбинировать)
  
  CX = 0 --- без атрибутов, т.е. файл не системный, не директория.

  *После выполнения функции:*
  - CF = 0 $and$ AX = дескриптор файла, если функция выполнилась успешно,
  - CF = 1 $and$ AX = 03h --- если путь не найден,
  - CF = 1 $and$ AX = 04h --- если слишком много открытых файлаов,
  - CF = 1 $and$ AX = 05h --- если доступ к файлу запрещен.
  - Если файл с указанной СФ уже существует, то функция 3Ch открывает его все равно, присваивая ему нулевую длину, т.е. информация, содержащаяся в нем будет затираться новой. Чтобы этого не произошло, если вы не уверены, что такого файла нет на диске, лучше воспользоваться функцией 5Bh.
+ *Создать и открыть новый файл --- 5Bh.*

  *При вызове:* AH = 5Bh, CX --- атрибут файла, DS:DX ---- адрес СФ

  *Возврат:* 
  - CF = 0 $and$ AX = дескриптор файла, если функция выполнилась успешно,
  - CF = 1 $and$ AX = код ошибки (03h, 04h, 05h --- так же как для 3Ch)
  - CF = 1 $and$ AX = 50h --- файл уже существует.
  Так что после выполнения 5Bh можно сравнить содержимое регистра AX с 50h и принимать решение считывать из этого файла содержимое или заполнять его новой информацией.
+ *Открыть существующий файл --- 3Dh.*

  *При вызове:* AH = 3Dh, AL --- режим доступа: 
  - 0 --- открыть для чтения,
  - 1 --- открыть для записи,
  - 2 --- для чтения и записи.
  DS:DX --- адрес СФ, CL --- атрибуты файла.
  
  *Возврат:*
  - CF = 0 $and$ AX = дескриптор файла, если функция выполнилась успешно,
  - CF = 1 $and$ AX = код ошибки (02h --- файл не найден, 03h --- путь не найден, 04h --- слишком много открытых файлов, 05h --- доступ запрещен)
+ *Изменить максимальное число открытых файлов --- 67h*

  *При вызове:* AH = 67h, BX --- максимальное число открытых файлов (от 20 до 65535)

  *Возврат:* 
  - CF = 0, если функция выполнилась успешно,
  - CF = 1 $and$ AX = код ошибки (04h --- указано меньше кол-ва уже открытых файлов, 08h --- DOS не хватает памяти для новой таблицы идентификаторов файлов)
+ *Закрыть файл --- 3Eh*
  
  *При вызове:* AH = 3Eh? BX = идентификатор файла.

  *Возврат:* 
  - CF = 0, если функция выполнилась успешно,
  - CF = 1 $and$ AX = 06h если указан неверный идентификатор.
+ *Удалить файл --- 41h*
  
  *При вызове:* AH = 41h, DS:DX = адрес ASCIIZ строки со СФ.
  
  *Возврат:*
  - CF = 0, файл удален
  - CF = 1 $and$ AH = 02h --- файл не найден, 03h --- путь не найден, AH = 05h --- доступ запрещен.
