= Процессор с точки зрения программиста, регистры общего назначения, регистр флагов.

Совокупность программно доступных средств процессора называется архитектурой процессора, с точки зрения программиста.

Начиная с i386 процессора программисту доступны 16 основных регистров, 11
регистров для работы с сопроцессором и мультимедийными приложениями, и
в реальном режиме доступны некоторые регистры управления и некоторые специальные регистры.

Регистр — набор из n устройств (триггеров) способный поразрядно хранить
двоичное число.

Регистры в i386:

- Общего назначения: EAX, EBX, ECX, EDX;
- Регистры индексов и указателей: ESI, EDI, ESP, EBP;
- Сегментные регистры (см. выше);
- Счетчик (указатель) команд — EIP;
- Регистр флагов — EFLAGS.

Регистры общего назначения могут использоваться для временного хранения адресов и данных. При работе с 16-разрядными данными к ним можно обращаться как
AX, BX, CX, DX, а при работе с байтами — к старшей (верхней) и младшей (нижней)
части 16-разрядного регистра, например, AH и AL.

Регистры общего назначения имеют названия, связанные с их функцией:

- AX -- аккумулятор (накопление);
- BX -- база (адресация операндов по базе);
- CX -- счетчик (организация циклов);
- DX -- регистр данных;

Также в процессоре есть *регистр флагов* -- FLAGS. Он определяет состояние
процессора и программы в каждый момент времени:

#set table.hline(stroke: .6pt)
#table(
  columns: 22,
  stroke: none,
  inset: 10pt,
  align: center,
  table.hline(),
  table.header(
    [31],
    [...],
    [19],
    [18],
    [17],
    [16],
    [15],
    [14],
    [13],
    [12],
    [11],
    [10],
    [9],
    [8],
    [7],
    [6],
    [5],
    [4],
    [3],
    [2],
    [1],
    [0],
  ),
  table.hline(),
  table.vline(x: 0),
  table.vline(x: 1),
  table.vline(x: 2),
  table.vline(x: 3),
  table.vline(x: 4),
  table.vline(x: 5),
  table.vline(x: 6),
  table.vline(x: 7),
  table.vline(x: 8),
  table.vline(x: 9),
  table.vline(x: 10),
  table.vline(x: 11),
  table.vline(x: 12),
  table.vline(x: 13),
  table.vline(x: 14),
  table.vline(x: 15),
  table.vline(x: 16),
  table.vline(x: 17),
  table.vline(x: 18),
  table.vline(x: 19),
  table.vline(x: 20),
  table.vline(x: 21),
  table.vline(x: 22),
  
  table.cell(fill: rgb("#acacac"))[], 
  table.cell(fill: rgb("#acacac"))[], 
  table.cell(fill: rgb("#acacac"))[],
  [AC], [VM], [RF],
  table.cell(fill: rgb("#acacac"))[],
  [NF],[IO],[PL],[OF],[DF],[IF],[TF],[SF],[ZF],
  table.cell(fill: rgb("#acacac"))[],
  [AF],
  table.cell(fill: rgb("#acacac"))[],
  [PF],
  table.cell(fill: rgb("#acacac"))[],
  [CF],
  table.hline()  
)

- CF - перенос
- PF - четность
- AF - полупоперечное
- ZF - флаг нуля
- SF - флаг знака
- TF - флаг трассировки
- IF - флаг прерывания
- DF - флаг напрвления
- ОF - флаг переполнения
- AC - флаг выравнивания операндов 
- VM - флаг виртуальных машин 
- RF - флаг маскирования прерывания
- NT - флаг вложенной задачи
- IOPL - уровень привелегий ввода/вывода
- CF -- перенос (беззнаковое переполнение); перенос за разрядную сетку при
сложении, заем для старшего разряда при вычитании. Пример для 4-битных
регистров:
$1111_2 + 0001_2 = 0000_2, C F = 1$

$0000_2 − 0001_2 = 0000_2 + 1111_2 = 1111_2, C F = 1$

- PF -- четность; 1, если в младшем байте результата содержится четное число
единиц;
- AF -- переполнение половины байта (Auxiliary Flag); устанавливается в 1, если при сложении происходит перенос из 3-го разряда в 4-й или если при вычитании происходит заем из 4-го разряда в 3-й.
- ZF -- флаг нуля; устанавливается в 1, если результат равен 0.
- SF -- флаг знака; равен знаковому разряду результата.
- TF -- трассировка; прерывать работу процессора после каждой команды.
- DF -- обработка строк; если DF = 0, то обработка идет в направлении увеличения адресов, если DF = 1, то обработка в направлении уменьшения адресов.
- OF -- знаковое переполнение; 1, если в результате знаковой операции произошло переполнение. То есть если у обоих операндов знаковые биты равны одному значению, а после выполнения операции результат имеет другое значение
знакового бита. Пример для 4-битных регистров:

$0100_2 + 0100_2 = 1000_2, O F = 1$

$1000_2 + 1000_2 = 0000_2, O F = 1$

- IOPL -- если уровень привелегий для текущей программы меньше или равен значению IOPL, то программе разрешены операции ввода/вывода (инструкции in и out). На 8086 и i186 этот флаг всегда равен 1.
- NT -- режим работы вложенных задач.
- RF -- маскирование некоторых прерываний процессора.
- VM -- защищенный режим или режим виртуальной машины.
- AC -- если 1 и адреса операндов длиной в слово или двойное слово не кратны 2 и 4 соответственно, происходит ошибка.
Замечание: при выполнении беззнаковых операций, флаг OF не дает никакой полезной информации, только CF. Аналогично, при выполнении знаковых операций,
при проверке на ошибки, имеет значение только флаг OF.

Еще одно: непонятный флаг IOPL по идее контролирует выполнения операций
ввода/вывода на кольцах ОС (RINGs). То есть если IOPL = 2, то коду на кольцах 0,
1 и 2 будет разрешено выполнять ввод и вывод. Получается, что в презентации (по
крайней в той версии, которая у меня на руках) ошибка.

