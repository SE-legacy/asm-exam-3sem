= Записи в Ассемблере, их описание и использование.

*Запись* --- это упакованные данные, которые занимают не отдельные, полные ячейки памяти, а части ячеек.

Запись в Ассемблере может в общей сложности занимать байт или слово, поля записаи --- группы последовательных битов. Если запись получается меньше байта или слова, поля записи расположатся в ладших битах ячейки.

Также, как и со структурами, записи сначала описывают, а затем объявляют переменные типа записи.

*Описание записи*:

#align(center)[
  ```asm
  <имя типа записи> record <имя поля>:<размер>[=<значение>][, ...]
  ```
]

\<значение> --- константное выражение, значение по умолчанию для поля. Не может быть ?. Если не указано, то полю присваивается 0.

\<размер> --- константное выражение, размер поля в битах.

\<имя поля> --- символическое имя, уникальное в рамках программы.

*Создание переменных типа записи:*


#align(center)[
  ```asm
  имя_записи имя_типа_записи <начальное значение, ...>
  ```
]

Начальными значениями могут быть константное выражение, ? или ничего.

Начальное значение ? приравнивается к 0. $quote.angle.l$Пустота$quote.angle.r$ означает, что нужно использовать значение по умолчанию.

Также, как и для структур, можно опускать *последние* начальные значения. Допускается использование директивы _dup_

*Использование:*

```asm
Date record y:7, m:4, d:5
; ...
dt1 Date <80, 7, 4>
dt2 Date <0>

; ...
mov AX, dt1
mov dt2, AX
```

Для работы с отдельными полями используются операторы *width* и *mask*:

#align(center)[
  ```asm
  width <поле>
  width <запись>
  ```
]

*width* возвращает размер поля или всей записи в битах, в зависимости от операнда.


#align(center)[
  ```asm
  mask <поле>
  mask <запись>
  ```
]

*mask* в зависимости от размера записи, возвращает байт или слово, соответствующие маске, которая содержит 1 в тех разрядах, которые принадлежат полю или записи.

*Пример:*

```asm
Date record y:7, m:4, d:5
; ...
    dt Date < >
; ...

; Найти тех, кто родился 1 числа месяца.
; dt хранит дату, с которой работаем.


    ; ...
l1:
    mov AX, dt 
    and AX, mask d 
    cmp AX, 1 
    je yes
no:
    ; ...
yes:
    ; ...
```

Именами полей Ассемблер присваивает количество бит, на которое нужно совершить сдвиг вправо, чтобы значение поля оказалось в младших битах ячейки.
