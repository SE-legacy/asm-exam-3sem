= Блоки повторений и макрооператоры в Ассемблере.

*Макросредства *позволяют генерировать, модифицировать текст программы на Ассемблере в процессе трансляции. К макросредствам относят: блоки повторений, макросы, директивы условной генерации.

Программы, написанные на макроязыке, транслируются в два этапа. Сначала все макросредства разворачиваются в чистый Ассемблер, этот этап называют *макрогенерацией* (препроцессинг). Затем выполняется *ассемблирование* --- перевод в машинный код.

*Блоки повторения* в процессе макрогенерации заменяются указанной последовательностью команд столько раз, сколько задано в заголовке блока, причем содержимое блока может модифицироваться.

*Макросы* похожи на подпрограммы. Описание макроса называется _макроопределением_, обращение -- _макрокомандой_. Результат _макроподстановки_ -- _макрорасширение_. Макросы лучше использовать для маленьких подпрограмм, а процедуры для объемных.

Общий вид блока повторений:
```asm
<заголовок>
      <тело>
endm
```
```asm <заголовок>``` может быть:
- rept n, где n  константное выражение. В результате n копий тела блока повторения записывается на его месте.

Пример создания массива из 256 элементов, заполненный числами от 0 до 255:
```asm
n = 1
Arr db 0
rept 255
        db n
        n = n + 1
endm
; Arr db 0
      ; db 1
      ; db 2
      ; ...
      ; db 255
```
- irp p, ```asm <v1, v2, ..., vn>```. p  имя формального параметра, который является локальным в теле блока повторения. Тело блока повторится n раз, последовательно подставляя в тело вместо p v1, v2, …, vn.

Пример отправки указанных регистров в стек одним блоком повторений:
```asm 
irp R, <AX, BX, CX, SI>
    push R
endm

; push AX
; push BX
; push CX
; push SI
```
Причем стоит помнить, что это всего лишь текстовые замены. То есть не обязательно, чтобы в ```asm < >``` были перечислены какие-то объекты.
- ```asm irpc p, <s1, s2, ...sn> ```

Работает примерно так же, как и irp, только последоватльно подставляет не строки, а символы s1, s2, …, sn.

```asm < >``` можно не использовать, если внутри них не используется пробел или точка с запятой.

Пример:
```asm
irpc param, 175p
        add AX, param
endm

; add AX, 1
; add AX, 7
; add AX, 5
; add AX, p
```

В макроопределениях и в блоках повторения могут использоваться специальные операторы Ассемблера, называемые *макрооператорами*.

+ Оператор &  указывает границы формального параметра, выделяет его из окружающего текста, при транслировании в текст программы не записывается.

  Примеры:
  - ```asm 
    irp k, <1, 5, 7>
    var&k dw ?
    endm
    ; var1 dw ?
    ; var5 dw ?
    ; var7 dw ?
    ```

  - ```asm
    irpc A,  "<                          "
    db 'A, &A, &A&B'
    endm
    ; db 'A, ", "B'
    ; db 'A, <, <B'
    ```

  Если рядом стоит несколько знаков &, макрогенератор удаляет за проход только один из них:

  ```asm
  irpc P1, AB
    irpc P2, HL
      inc P1&&P2
    endm
  endm
  ; После первого прохода:
  ; irpc P2, HL
  ; inc A&P2
  ; endm
  ; irpc P2, HL
  ; inc B&P2
  ; endm
  ; После второго прохода:
  ; inc AH
  ; inc AL
  ; inc BH
  ; inc BL
  ```
+ Оператор ```asm<>```  позволяет передать операнд с запятыми, пробелами и точкой запятой, как одну цельную строку:

  ```asm 
  irp v, <<1, 2>, 3>
  db v
  endm
  ; db 1, 2
  ; db 3```
  ------------------------------------------------------------------------------------
  ```asm 
  irpc s, <A; B>
      db 's'
  endm
  ; db 'A'
  ; db ';'
  ; db 'B'
  ```
+ Оператор !  действует, как \<>, только на один единственный символ, идущий после него.
+ Оператор %  указывает на то, что следующий текст является константным выражением, которое должно быть вычислено перед подстановкой:
  ```asm
  k equ 4
  irp A, <k + 1, %k + 1, W%k + 1>
  dw A
  endm
  ; k equ 4
  ; dw k + 1
  ; dw 5
  ; dw w5
  ```
+ Оператор ;;  начало макрокомментария
